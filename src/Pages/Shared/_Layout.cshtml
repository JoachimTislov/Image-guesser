@using Image_guesser.Core.Domain.UserContext.Services
@using Microsoft.AspNetCore.Identity
@using Image_guesser.Core.Domain.UserContext
@using MediatR
@inject IUserService UserService
@inject SignInManager<User> SignInManager
@inject IMediator mediator

<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Image Guesser </title>
    <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>

@{
    // Used to allow a user to join a session after traversing from the session page
    Guid? sessionId = null;
    string? userId = null;
    bool userIsAuthed = SignInManager.IsSignedIn(User);
    if (User.Identity?.IsAuthenticated ?? false && userIsAuthed)
    {
        sessionId = await UserService.GetSessionIdForGivenUserWithClaimPrincipal(User);

        // This code sets of an event each time the user visits a page
        // This is helpful because we can then monitor where the user is at all times

        var currentUrl = Context.GetEndpoint()?.DisplayName ?? "/Home/Index";

        userId = UserService.GetUserIdByClaimsPrincipal(User);

        if (Context.Session.GetString("LastPageUrl") != currentUrl && userId != null)
        {
            Context.Session.SetString("LastPageUrl", currentUrl);
            await mediator.Publish(new UserNavigatedToPage(currentUrl, userId));
        }

        // I am not sure if theres a better place to do this.
        // Atleast having it here saves writing it in every single OnGet function
        // Maybe handle this at client side
    }
}

<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-dark bg-dark border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-page="/Home/Index"> Image Guesser </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse"
                    aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-white" asp-page="/Home/Index">Home</a>
                        </li>
                        @if (userIsAuthed && sessionId != null && userId != null)
                        {
                            <li class="nav-item">
                                <a class="nav-link text-white" id="ActiveLobby" session-Id="@sessionId" user-Id="@userId"
                                    asp-page="/Lobby/Session" asp-route-id="@sessionId"> Active
                                    Lobby
                                </a>
                            </li>
                        }
                    </ul>

                    <partial name="_LoginPartial" />
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - Image Guesser
        </div>
    </footer>

    <script src="~/lib/jquery/jquery.min.js"></script>
    <script src="~/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/gameHub.js" type="module"></script>
    <script src="~/js/layout.js" type="module"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>